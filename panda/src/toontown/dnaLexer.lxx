%{
#include "dnaLexerDefs.h"
#include "dnaParserDefs.h"
#include "dnaParser.h"

#include "pstrtod.h"

static int yyinput(void);        // declared by flex.
extern "C" int dnayywrap();

////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static std::istream *input_p = nullptr;

// This is the name of the dna file we're parsing.  We keep it so we
// can print it out for error messages.
static std::string dna_filename;


////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
dna_init_lexer(std::istream &in, const std::string &filename) {
  input_p = &in;
  dna_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
}

int
dna_error_count() {
  return error_count;
}

int
dna_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
dnayywrap(void) {
  return 1;
}

void
dnayyerror(const std::string &msg) {
  std::cerr << "\nError";
  if (!dna_filename.empty()) {
    std::cerr << " in " << dna_filename;
  }
  std::cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(std::cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  error_count++;
}

void
dnayywarning(const std::string &msg) {
  std::cerr << "\nWarning";
  if (!dna_filename.empty()) {
    std::cerr << " in " << dna_filename;
  }
  std::cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(std::cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  warning_count++;
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != nullptr);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();
    if (result >= 0 && result < max_size) {
      // Truncate at the end of the read.
      buffer[result] = '\0';
    }

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      strncpy(current_line, dnayytext, max_error_width);
      current_line[max_error_width] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != nullptr) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static std::string
scan_quoted_string(char quote_mark) {
  std::string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != quote_mark && c != EOF) {
    // A newline is not allowed within a string unless it is escaped.
    if (c == '\n') {
      c = EOF;
      break;

    } else if (c == '\\') {
      // Backslash escapes the following character.  We also respect
      // some C conventions.
      c = read_char(line, col);
      switch (c) {
      case 'a':
        result += '\a';
        c = read_char(line, col);
        break;

      case 'n':
        result += '\n';
        c = read_char(line, col);
        break;

      case 'r':
        result += '\r';
        c = read_char(line, col);
        break;

      case 't':
        result += '\t';
        c = read_char(line, col);
        break;

      case 'x':
        {
          int hex = 0;
          c = read_char(line, col);
          for (int i = 0; i < 2 && isxdigit(c); i++) {
            hex = hex * 16 + (isdigit(c) ? c - '0' : tolower(c) - 'a' + 10);
            c = read_char(line, col);
          }

          result += hex;
        }
        break;

      case '0':
        {
          int oct = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && (c >= '0' && c < '7'); i++) {
            oct = oct * 8 + (c - '0');
            c = read_char(line, col);
          }

          result += oct;
        }
        break;

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          int dec = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && isdigit(c); i++) {
            dec = dec * 10 + (c - '0');
            c = read_char(line, col);
          }

          result += dec;
        }
        break;

      case EOF:
        break;

      default:
        result += c;
        c = read_char(line, col);
      }

    } else {
      result += c;
      c = read_char(line, col);
    }
  }

  if (c == EOF) {
    dnayyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;

  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      dnayywarning("This comment contains a nested /* symbol--possibly unclosed?");
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    dnayyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}



// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
inline void accept() {
  col_number += yyleng;
}

%}

UNSIGNED_INTEGERNUM  ([0-9]+)
SIGNED_INTEGERNUM    ([+-]([0-9]+))
UNSIGNED_HEXNUM      (0x[0-9a-fA-F]*)
REALNUM              ([+-]?((([0-9]+[.])|([0-9]*[.][0-9]+))([eE][+-]?[0-9]+)?)|([+-]?[0-9]+[eE][+-]?[0-9]+))

%%


\n.* {
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, dnayytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}

[ \t\r] {
  // Eat whitespace.
  accept();
}

"//".* {
  // Eat C++-style comments.
  accept();
}

"/*" {
  // Eat C-style comments.
  accept();
  eat_c_comment();
}


"store_suit_point" {
  accept();
  return STORE_SUIT_POINT;
}

"group" {
  accept();
  return GROUP;
}

"visgroup" {
  accept();
  return VISGROUP;
}

"vis" {
  accept();
  return VIS;
}

"STREET_POINT" {
  accept();
  return DNA_STREET_POINT;
}

"FRONT_DOOR_POINT" {
  accept();
  return DNA_FRONT_DOOR_POINT;
}

"SIDE_DOOR_POINT" {
  accept();
  return DNA_SIDE_DOOR_POINT;
}

"COGHQ_IN_POINT" {
  accept();
  return DNA_COGHQ_IN_POINT;
}

"COGHQ_OUT_POINT" {
  accept();
  return DNA_COGHQ_OUT_POINT;
}

"suit_edge" {
  accept();
  return SUIT_EDGE;
}

"battle_cell" {
  accept();
  return BATTLE_CELL;
}

"prop" {
  accept();
  return PROP;
}

"pos" {
  accept();
  return POS;
}

"hpr" {
  accept();
  return HPR;
}

"scale" {
  accept();
  return SCALE;
}

"code" {
  accept();
  return CODE;
}

"color" {
  accept();
  return COLOR;
}

"model" {
  accept();
  return MODEL;
}

"store_node" {
  accept();
  return STORE_NODE;
}

"sign" {
  accept();
  return SIGN;
}

"baseline" {
  accept();
  return BASELINE;
}

"width" {
  accept();
  return WIDTH;
}

"height" {
  accept();
  return HEIGHT;
}

"stomp" {
  accept();
  return STOMP;
}

"stumble" {
  accept();
  return STUMBLE;
}

"indent" {
  accept();
  return INDENT;
}

"wiggle" {
  accept();
  return WIGGLE;
}

"kern" {
  accept();
  return KERN;
}

"text" {
  accept();
  return TEXT;
}

"letters" {
  accept();
  return LETTERS;
}

"store_font" {
  accept();
  return STORE_FONT;
}

"flat_building" {
  accept();
  return FLAT_BUILDING;
}

"wall" {
  accept();
  return WALL;
}

"windows" {
  accept();
  return WINDOWS;
}

"count" {
  accept();
  return COUNT;
}

"cornice" {
  accept();
  return CORNICE;
}

"landmark_building" {
  accept();
  return LANDMARK_BUILDING;
}

"title" {
  accept();
  return TITLE;
}

"article" {
  accept();
  return ARTICLE;
}

"building_type" {
  accept();
  return BUILDING_TYPE;
}

"door" {
  accept();
  return DOOR;
}

"store_texture" {
  accept();
  return STORE_TEXTURE;
}

"street" {
  accept();
  return STREET;
}

"texture" {
  accept();
  return TEXTURE;
}

"graphic" {
  accept();
  return GRAPHIC;
}

"hood_model" {
  accept();
  return HOODMODEL;
}

"place_model" {
  accept();
  return PLACEMODEL;
}

"nhpr" {
  accept();
  return HPR;
}

"flags" {
  accept();
  return FLAGS;
}

"node" {
  accept();
  return NODE;
}

"flat_door" {
  accept();
  return FLAT_DOOR;
}

"anim" {
  accept();
  return ANIM;
}

"cell_id" {
  accept();
  return CELL_ID;
}

"anim_prop" {
  accept();
  return ANIM_PROP;
}

"interactive_prop" {
  accept();
  return INTERACTIVE_PROP;
}

"anim_building" {
  accept();
  return ANIM_BUILDING;
}


{UNSIGNED_INTEGERNUM} {
  // An unsigned integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dnayylval.str = dnayytext;
  dnayylval.u.uint64 = 0;
  const char *p = dnayytext;
  while (*p != '\0') {
    uint64_t next_value = dnayylval.u.uint64 * 10;
    if (next_value < dnayylval.u.uint64) {
      dnayyerror("Number out of range.");
      dnayylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    dnayylval.u.uint64 = next_value + (*p - '0');
    ++p;
  }

  return UNSIGNED_INTEGER;
}

{SIGNED_INTEGERNUM} {
  // A signed integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dnayylval.str = dnayytext;

  bool neg = false;
  const char *p = dnayytext;
  if (*p == '-') {
    neg = true;
    ++p;
  } else if (*p == '+') {
    ++p;
  }

  uint64_t value = 0;
  while (*p != '\0') {
    uint64_t next_value = value * 10;
    if (next_value < value) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
      return SIGNED_INTEGER;
    }

    value = next_value + (*p - '0');
    ++p;
  }

  if (neg) {
    dnayylval.u.int64 = -(int64_t)value;
    if (dnayylval.u.int64 > 0) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
    }
  } else {
    dnayylval.u.int64 = (int64_t)value;
    if (dnayylval.u.int64 < 0) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
    }
  }

  return SIGNED_INTEGER;
}

{UNSIGNED_HEXNUM} {
  // A hexadecimal integer number.
  accept();

  // As above, we'll decode the hex string by hand.
  dnayylval.str = dnayytext;
  dnayylval.u.uint64 = 0;
  const char *p = dnayytext + 2;
  while (*p != '\0') {
    uint64_t next_value = dnayylval.u.uint64 * 16;
    if (next_value < dnayylval.u.uint64) {
      dnayyerror("Number out of range.");
      dnayylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    if (isalpha(*p)) {
      dnayylval.u.uint64 = next_value + (tolower(*p) - 'a' + 10);
    } else {
      dnayylval.u.uint64 = next_value + (*p - '0');
    }
    ++p;
  }

  return UNSIGNED_INTEGER;
}

{REALNUM} {
  // A floating-point number.
  accept();
  dnayylval.u.real = patof(dnayytext);
  dnayylval.str = dnayytext;
  return FLOAT_REAL;
}

["] {
  // Quoted string.
  accept();
  dnayylval.str = scan_quoted_string('"');
  return QUOTED_STRING;
}

['] {
  // Single-quoted string.
  accept();
  dnayylval.str = scan_quoted_string('\'');
  return UNQUOTED_STRING;
}

. {
  // Send any other printable character as itself.
  accept();
  return dnayytext[0];
}
