#line 1 "dnaLexer.cxx"

#line 3 "dnaLexer.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer dnayy_create_buffer
#define yy_delete_buffer dnayy_delete_buffer
#define yy_scan_buffer dnayy_scan_buffer
#define yy_scan_string dnayy_scan_string
#define yy_scan_bytes dnayy_scan_bytes
#define yy_init_buffer dnayy_init_buffer
#define yy_flush_buffer dnayy_flush_buffer
#define yy_load_buffer_state dnayy_load_buffer_state
#define yy_switch_to_buffer dnayy_switch_to_buffer
#define yypush_buffer_state dnayypush_buffer_state
#define yypop_buffer_state dnayypop_buffer_state
#define yyensure_buffer_stack dnayyensure_buffer_stack
#define yy_flex_debug dnayy_flex_debug
#define yyin dnayyin
#define yyleng dnayyleng
#define yylex dnayylex
#define yylineno dnayylineno
#define yyout dnayyout
#define yyrestart dnayyrestart
#define yytext dnayytext
#define yywrap dnayywrap
#define yyalloc dnayyalloc
#define yyrealloc dnayyrealloc
#define yyfree dnayyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define dnayy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer dnayy_create_buffer
#endif

#ifdef yy_delete_buffer
#define dnayy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer dnayy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define dnayy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer dnayy_scan_buffer
#endif

#ifdef yy_scan_string
#define dnayy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string dnayy_scan_string
#endif

#ifdef yy_scan_bytes
#define dnayy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes dnayy_scan_bytes
#endif

#ifdef yy_init_buffer
#define dnayy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer dnayy_init_buffer
#endif

#ifdef yy_flush_buffer
#define dnayy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer dnayy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define dnayy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state dnayy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define dnayy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer dnayy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define dnayypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state dnayypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define dnayypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state dnayypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define dnayyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack dnayyensure_buffer_stack
#endif

#ifdef yylex
#define dnayylex_ALREADY_DEFINED
#else
#define yylex dnayylex
#endif

#ifdef yyrestart
#define dnayyrestart_ALREADY_DEFINED
#else
#define yyrestart dnayyrestart
#endif

#ifdef yylex_init
#define dnayylex_init_ALREADY_DEFINED
#else
#define yylex_init dnayylex_init
#endif

#ifdef yylex_init_extra
#define dnayylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra dnayylex_init_extra
#endif

#ifdef yylex_destroy
#define dnayylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy dnayylex_destroy
#endif

#ifdef yyget_debug
#define dnayyget_debug_ALREADY_DEFINED
#else
#define yyget_debug dnayyget_debug
#endif

#ifdef yyset_debug
#define dnayyset_debug_ALREADY_DEFINED
#else
#define yyset_debug dnayyset_debug
#endif

#ifdef yyget_extra
#define dnayyget_extra_ALREADY_DEFINED
#else
#define yyget_extra dnayyget_extra
#endif

#ifdef yyset_extra
#define dnayyset_extra_ALREADY_DEFINED
#else
#define yyset_extra dnayyset_extra
#endif

#ifdef yyget_in
#define dnayyget_in_ALREADY_DEFINED
#else
#define yyget_in dnayyget_in
#endif

#ifdef yyset_in
#define dnayyset_in_ALREADY_DEFINED
#else
#define yyset_in dnayyset_in
#endif

#ifdef yyget_out
#define dnayyget_out_ALREADY_DEFINED
#else
#define yyget_out dnayyget_out
#endif

#ifdef yyset_out
#define dnayyset_out_ALREADY_DEFINED
#else
#define yyset_out dnayyset_out
#endif

#ifdef yyget_leng
#define dnayyget_leng_ALREADY_DEFINED
#else
#define yyget_leng dnayyget_leng
#endif

#ifdef yyget_text
#define dnayyget_text_ALREADY_DEFINED
#else
#define yyget_text dnayyget_text
#endif

#ifdef yyget_lineno
#define dnayyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno dnayyget_lineno
#endif

#ifdef yyset_lineno
#define dnayyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno dnayyset_lineno
#endif

#ifdef yywrap
#define dnayywrap_ALREADY_DEFINED
#else
#define yywrap dnayywrap
#endif

#ifdef yyalloc
#define dnayyalloc_ALREADY_DEFINED
#else
#define yyalloc dnayyalloc
#endif

#ifdef yyrealloc
#define dnayyrealloc_ALREADY_DEFINED
#else
#define yyrealloc dnayyrealloc
#endif

#ifdef yyfree
#define dnayyfree_ALREADY_DEFINED
#else
#define yyfree dnayyfree
#endif

#ifdef yytext
#define dnayytext_ALREADY_DEFINED
#else
#define yytext dnayytext
#endif

#ifdef yyleng
#define dnayyleng_ALREADY_DEFINED
#else
#define yyleng dnayyleng
#endif

#ifdef yyin
#define dnayyin_ALREADY_DEFINED
#else
#define yyin dnayyin
#endif

#ifdef yyout
#define dnayyout_ALREADY_DEFINED
#else
#define yyout dnayyout
#endif

#ifdef yy_flex_debug
#define dnayy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug dnayy_flex_debug
#endif

#ifdef yylineno
#define dnayylineno_ALREADY_DEFINED
#else
#define yylineno dnayylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[385] =
    {   0,
        0,    0,   69,   67,    2,    1,   65,   66,   67,   67,
       67,   61,   61,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,    1,    0,   62,   64,    4,    3,   64,
       61,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    0,   64,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,   20,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
       32,    0,    0,    0,   52,   54,    0,   16,    0,   24,
        0,    0,    0,    0,    0,   33,    0,    0,   37,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,    0,   39,   53,    0,    0,    6,    0,
        0,    0,    0,    0,    0,   22,    0,   19,   28,    0,

        0,    0,    0,    0,   42,    0,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   27,    0,   30,    0,    0,    0,
        0,    0,   47,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,   43,    0,    0,    0,
       57,   40,    0,    0,   49,    0,    0,    0,   34,    0,
        0,    0,    0,    0,   29,    0,   48,    0,   38,    0,
        0,    0,    0,    0,    0,    0,   25,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    0,    0,   58,    0,    0,

        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       50,    0,    0,    0,   35,   23,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,   51,
        0,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   44,
       36,    0,    0,    0,   46,   12,    0,    0,    0,    0,
        0,    0,   13,    0,   11,    0,    0,    0,   10,   59,
        0,    5,   41,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    1,
        1,    6,    7,    1,    7,    8,    9,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   12,   12,   13,   14,   15,   16,
       17,   18,   19,    1,    1,    1,    1,   20,   21,   22,
       23,   24,   25,   26,   27,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,
       42,   43,    1,   44,   45,   46,   47,   48,   49,   50,
       51,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[388] =
    {   0,
        0,    0,  430,  431,  431,    0,  431,  431,   44,   46,
       52,   52,   56,  408,  404,   46,   27,   30,   36,  385,
      387,  381,   37,  383,  390,   52,  380,   40,   44,   53,
       54,  384,   60,    0,   63,   84,   93,  431,    0,   95,
      101,    0,  403,  398,  404,  393,  379,  369,   68,  377,
      374,   83,  370,  382,   78,  373,  367,  364,   85,  363,
      365,  359,  372,  360,  370,  372,  355,  357,  369,  362,
       54,  359,  345,  348,  348,  353,   84,  122,    0,    0,
      373,  370,  374,  373,  347,  349,  352,  338,  344,  343,
      348,  338,  338,  337,  333,   88,  333,  328,  339,  341,

      431,  339,  338,  329,  337,  322,  334,  322,  332,  333,
      431,  320,  323,  320,   95,  327,  319,  312,  311,  317,
      320,  315,  307,  317,  319,  126,  130,  327,  323,  320,
      332,  318,  314,  305,  304,  310,  313,  431,  296,  302,
      292,  431,  292,  308,  299,  291,  297,  304,  290,  286,
      431,  289,  295,  288,  431,  431,  293,  431,  292,  431,
      281,  290,  289,  291,  292,  272,  285,  273,  431,  280,
      276,  272,  285,  284,  297,  284,  108,  270,  271,  274,
      269,  268,  431,  273,  431,  431,  112,  266,  431,  256,
      261,  254,  270,  269,  253,  431,  268,  431,  431,  267,

      248,  254,  259,  247,  431,  248,  431,  256,  239,  124,
      273,  265,  257,  237,  239,  249,  240,  252,  238,  246,
      244,  229,  233,  243,  431,  231,  431,  241,  227,  225,
      229,  112,  431,  235,  235,  233,  218,  431,  219,  243,
      235,  240,  239,  237,  221,  215,  431,  223,  224,  219,
      431,  431,  216,  210,  431,  219,  204,  211,  431,  206,
      205,  204,  198,  211,  431,  208,  431,  199,  431,  213,
      214,  218,  214,  216,  197,  192,  431,  201,  205,  193,
      187,  197,  192,  200,  195,  185,  193,  187,  173,  189,
      431,  199,  192,  195,  190,  198,  184,  431,  176,  168,

      181,  431,  173,  163,  180,  176,  162,  174,  160,  159,
      431,  183,  181,  174,  179,  180,  162,  159,  146,  159,
      431,  162,  147,  154,  431,  431,  164,  144,  171,  168,
      166,  166,  160,  144,  431,  141,  142,  154,  144,  431,
      137,  135,  158,  158,  155,  156,  431,  139,  140,  137,
      128,  131,  127,  135,  141,  146,  146,  143,  431,  431,
      431,  116,  124,  118,  431,  431,  128,  132,  124,  107,
      111,  106,  431,   98,  431,   78,   77,   47,  431,  431,
       40,  431,  431,  431,  158,  161,   50
    } ;

static const flex_int16_t yy_def[388] =
    {   0,
      384,    1,  384,  384,  384,  385,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  385,  384,  384,  384,  384,  386,  384,
      384,  387,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  386,  387,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,    0,  384,  384,  384
    } ;

static const flex_int16_t yy_nxt[483] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,    4,   14,    4,    4,   15,    4,    4,    4,    4,
        4,    4,    4,    4,   16,    4,    4,    4,   17,   18,
       19,   20,    4,   21,   22,   23,   24,   25,   26,   27,
       28,    4,   29,    4,   30,   31,    4,   32,   33,    4,
        4,   35,   80,   36,   36,   37,   37,   38,   49,   40,
       39,   41,   41,   40,   45,   41,   41,   47,   51,   56,
       48,   46,   37,   37,  383,   64,   50,   52,   57,   58,
       61,   65,   66,   69,   62,   67,   73,   68,   76,   70,
       74,   40,  382,   36,   36,  115,   77,  116,   71,   72,

      117,   42,   37,   37,   37,   37,   97,   78,   40,   78,
       41,   41,   87,   88,   91,  123,  102,  381,  124,   98,
      380,   92,  143,  379,  125,   78,   93,   78,  126,   94,
      103,  127,  127,  144,  161,  127,  127,  214,  162,  127,
      127,  222,  240,  223,  241,  261,  378,  377,  376,  375,
      215,  374,  262,  373,  372,  371,  263,  264,   34,  370,
       34,   79,  369,   79,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,

      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,

      226,  225,  224,  221,  220,  219,  218,  217,  216,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  149,  148,  147,  146,  145,  142,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  122,  121,  120,  119,  118,  114,  113,  112,  111,

      110,  109,  108,  107,  106,  105,  104,  101,  100,   99,
       96,   95,   90,   89,   86,   85,   84,   83,   82,   81,
       75,   63,   60,   59,   55,   54,   53,   44,   43,  384,
        3,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384
    } ;

static const flex_int16_t yy_chk[483] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,  387,    9,    9,   10,   10,   11,   18,   12,
       11,   12,   12,   13,   16,   13,   13,   17,   19,   23,
       17,   16,   35,   35,  381,   28,   18,   19,   23,   23,
       26,   28,   29,   30,   26,   29,   31,   29,   33,   30,
       31,   36,  378,   36,   36,   71,   33,   71,   30,   30,

       71,   12,   37,   37,   40,   40,   55,   37,   41,   40,
       41,   41,   49,   49,   52,   77,   59,  377,   77,   55,
      376,   52,   96,  374,   77,   37,   52,   40,   78,   52,
       59,   78,   78,   96,  115,  126,  126,  177,  115,  127,
      127,  187,  210,  187,  210,  232,  372,  371,  370,  369,
      177,  368,  232,  367,  364,  363,  232,  232,  385,  362,
      385,  386,  358,  386,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  346,  345,  344,  343,  342,  341,
      339,  338,  337,  336,  334,  333,  332,  331,  330,  329,
      328,  327,  324,  323,  322,  320,  319,  318,  317,  316,

      315,  314,  313,  312,  310,  309,  308,  307,  306,  305,
      304,  303,  301,  300,  299,  297,  296,  295,  294,  293,
      292,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  276,  275,  274,  273,  272,  271,
      270,  268,  266,  264,  263,  262,  261,  260,  258,  257,
      256,  254,  253,  250,  249,  248,  246,  245,  244,  243,
      242,  241,  240,  239,  237,  236,  235,  234,  231,  230,
      229,  228,  226,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  209,  208,  206,
      204,  203,  202,  201,  200,  197,  195,  194,  193,  192,

      191,  190,  188,  184,  182,  181,  180,  179,  178,  176,
      175,  174,  173,  172,  171,  170,  168,  167,  166,  165,
      164,  163,  162,  161,  159,  157,  154,  153,  152,  150,
      149,  148,  147,  146,  145,  144,  143,  141,  140,  139,
      137,  136,  135,  134,  133,  132,  131,  130,  129,  128,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      114,  113,  112,  110,  109,  108,  107,  106,  105,  104,
      103,  102,  100,   99,   98,   97,   95,   94,   93,   92,
       91,   90,   89,   88,   87,   86,   85,   84,   83,   82,
       81,   76,   75,   74,   73,   72,   70,   69,   68,   67,

       66,   65,   64,   63,   62,   61,   60,   58,   57,   56,
       54,   53,   51,   50,   48,   47,   46,   45,   44,   43,
       32,   27,   25,   24,   22,   21,   20,   15,   14,    3,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "dnaLexer.lxx"
#line 2 "dnaLexer.lxx"
#include "dnaLexerDefs.h"
#include "dnaParserDefs.h"
#include "dnaParser.h"

#include "pstrtod.h"

static int yyinput(void);        // declared by flex.
extern "C" int dnayywrap();

////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static std::istream *input_p = nullptr;

// This is the name of the dna file we're parsing.  We keep it so we
// can print it out for error messages.
static std::string dna_filename;


////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
dna_init_lexer(std::istream &in, const std::string &filename) {
  input_p = &in;
  dna_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
}

int
dna_error_count() {
  return error_count;
}

int
dna_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
dnayywrap(void) {
  return 1;
}

void
dnayyerror(const std::string &msg) {
  std::cerr << "\nError";
  if (!dna_filename.empty()) {
    std::cerr << " in " << dna_filename;
  }
  std::cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(std::cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  error_count++;
}

void
dnayywarning(const std::string &msg) {
  std::cerr << "\nWarning";
  if (!dna_filename.empty()) {
    std::cerr << " in " << dna_filename;
  }
  std::cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(std::cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  warning_count++;
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != nullptr);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();
    if (result >= 0 && result < max_size) {
      // Truncate at the end of the read.
      buffer[result] = '\0';
    }

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      strncpy(current_line, dnayytext, max_error_width);
      current_line[max_error_width] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != nullptr) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static std::string
scan_quoted_string(char quote_mark) {
  std::string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != quote_mark && c != EOF) {
    // A newline is not allowed within a string unless it is escaped.
    if (c == '\n') {
      c = EOF;
      break;

    } else if (c == '\\') {
      // Backslash escapes the following character.  We also respect
      // some C conventions.
      c = read_char(line, col);
      switch (c) {
      case 'a':
        result += '\a';
        c = read_char(line, col);
        break;

      case 'n':
        result += '\n';
        c = read_char(line, col);
        break;

      case 'r':
        result += '\r';
        c = read_char(line, col);
        break;

      case 't':
        result += '\t';
        c = read_char(line, col);
        break;

      case 'x':
        {
          int hex = 0;
          c = read_char(line, col);
          for (int i = 0; i < 2 && isxdigit(c); i++) {
            hex = hex * 16 + (isdigit(c) ? c - '0' : tolower(c) - 'a' + 10);
            c = read_char(line, col);
          }

          result += hex;
        }
        break;

      case '0':
        {
          int oct = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && (c >= '0' && c < '7'); i++) {
            oct = oct * 8 + (c - '0');
            c = read_char(line, col);
          }

          result += oct;
        }
        break;

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          int dec = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && isdigit(c); i++) {
            dec = dec * 10 + (c - '0');
            c = read_char(line, col);
          }

          result += dec;
        }
        break;

      case EOF:
        break;

      default:
        result += c;
        c = read_char(line, col);
      }

    } else {
      result += c;
      c = read_char(line, col);
    }
  }

  if (c == EOF) {
    dnayyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;

  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      dnayywarning("This comment contains a nested /* symbol--possibly unclosed?");
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    dnayyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}



// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
inline void accept() {
  col_number += yyleng;
}

#line 1250 "dnaLexer.cxx"
#line 1251 "dnaLexer.cxx"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 327 "dnaLexer.lxx"



#line 1472 "dnaLexer.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 385 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 431 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 330 "dnaLexer.lxx"
{
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, dnayytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 344 "dnaLexer.lxx"
{
  // Eat whitespace.
  accept();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 349 "dnaLexer.lxx"
{
  // Eat C++-style comments.
  accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 354 "dnaLexer.lxx"
{
  // Eat C-style comments.
  accept();
  eat_c_comment();
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 361 "dnaLexer.lxx"
{
  accept();
  return STORE_SUIT_POINT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 366 "dnaLexer.lxx"
{
  accept();
  return GROUP;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 371 "dnaLexer.lxx"
{
  accept();
  return VISGROUP;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 376 "dnaLexer.lxx"
{
  accept();
  return VIS;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 381 "dnaLexer.lxx"
{
  accept();
  return DNA_STREET_POINT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 386 "dnaLexer.lxx"
{
  accept();
  return DNA_FRONT_DOOR_POINT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 391 "dnaLexer.lxx"
{
  accept();
  return DNA_SIDE_DOOR_POINT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 396 "dnaLexer.lxx"
{
  accept();
  return DNA_COGHQ_IN_POINT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 401 "dnaLexer.lxx"
{
  accept();
  return DNA_COGHQ_OUT_POINT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 406 "dnaLexer.lxx"
{
  accept();
  return SUIT_EDGE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 411 "dnaLexer.lxx"
{
  accept();
  return BATTLE_CELL;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 416 "dnaLexer.lxx"
{
  accept();
  return PROP;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 421 "dnaLexer.lxx"
{
  accept();
  return POS;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 426 "dnaLexer.lxx"
{
  accept();
  return HPR;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 431 "dnaLexer.lxx"
{
  accept();
  return SCALE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 436 "dnaLexer.lxx"
{
  accept();
  return CODE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 441 "dnaLexer.lxx"
{
  accept();
  return COLOR;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 446 "dnaLexer.lxx"
{
  accept();
  return MODEL;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 451 "dnaLexer.lxx"
{
  accept();
  return STORE_NODE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 456 "dnaLexer.lxx"
{
  accept();
  return SIGN;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 461 "dnaLexer.lxx"
{
  accept();
  return BASELINE;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 466 "dnaLexer.lxx"
{
  accept();
  return WIDTH;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 471 "dnaLexer.lxx"
{
  accept();
  return HEIGHT;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 476 "dnaLexer.lxx"
{
  accept();
  return STOMP;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 481 "dnaLexer.lxx"
{
  accept();
  return STUMBLE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 486 "dnaLexer.lxx"
{
  accept();
  return INDENT;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 491 "dnaLexer.lxx"
{
  accept();
  return WIGGLE;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 496 "dnaLexer.lxx"
{
  accept();
  return KERN;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 501 "dnaLexer.lxx"
{
  accept();
  return TEXT;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 506 "dnaLexer.lxx"
{
  accept();
  return LETTERS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 511 "dnaLexer.lxx"
{
  accept();
  return STORE_FONT;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 516 "dnaLexer.lxx"
{
  accept();
  return FLAT_BUILDING;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 521 "dnaLexer.lxx"
{
  accept();
  return WALL;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 526 "dnaLexer.lxx"
{
  accept();
  return WINDOWS;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 531 "dnaLexer.lxx"
{
  accept();
  return COUNT;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 536 "dnaLexer.lxx"
{
  accept();
  return CORNICE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 541 "dnaLexer.lxx"
{
  accept();
  return LANDMARK_BUILDING;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 546 "dnaLexer.lxx"
{
  accept();
  return TITLE;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 551 "dnaLexer.lxx"
{
  accept();
  return ARTICLE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 556 "dnaLexer.lxx"
{
  accept();
  return BUILDING_TYPE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 561 "dnaLexer.lxx"
{
  accept();
  return DOOR;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 566 "dnaLexer.lxx"
{
  accept();
  return STORE_TEXTURE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 571 "dnaLexer.lxx"
{
  accept();
  return STREET;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 576 "dnaLexer.lxx"
{
  accept();
  return TEXTURE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 581 "dnaLexer.lxx"
{
  accept();
  return GRAPHIC;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 586 "dnaLexer.lxx"
{
  accept();
  return HOODMODEL;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 591 "dnaLexer.lxx"
{
  accept();
  return PLACEMODEL;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 596 "dnaLexer.lxx"
{
  accept();
  return HPR;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 601 "dnaLexer.lxx"
{
  accept();
  return FLAGS;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 606 "dnaLexer.lxx"
{
  accept();
  return NODE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 611 "dnaLexer.lxx"
{
  accept();
  return FLAT_DOOR;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 616 "dnaLexer.lxx"
{
  accept();
  return ANIM;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 621 "dnaLexer.lxx"
{
  accept();
  return CELL_ID;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 626 "dnaLexer.lxx"
{
  accept();
  return ANIM_PROP;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 631 "dnaLexer.lxx"
{
  accept();
  return INTERACTIVE_PROP;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 636 "dnaLexer.lxx"
{
  accept();
  return ANIM_BUILDING;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 642 "dnaLexer.lxx"
{
  // An unsigned integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dnayylval.str = dnayytext;
  dnayylval.u.uint64 = 0;
  const char *p = dnayytext;
  while (*p != '\0') {
    uint64_t next_value = dnayylval.u.uint64 * 10;
    if (next_value < dnayylval.u.uint64) {
      dnayyerror("Number out of range.");
      dnayylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    dnayylval.u.uint64 = next_value + (*p - '0');
    ++p;
  }

  return UNSIGNED_INTEGER;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 665 "dnaLexer.lxx"
{
  // A signed integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dnayylval.str = dnayytext;

  bool neg = false;
  const char *p = dnayytext;
  if (*p == '-') {
    neg = true;
    ++p;
  } else if (*p == '+') {
    ++p;
  }

  uint64_t value = 0;
  while (*p != '\0') {
    uint64_t next_value = value * 10;
    if (next_value < value) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
      return SIGNED_INTEGER;
    }

    value = next_value + (*p - '0');
    ++p;
  }

  if (neg) {
    dnayylval.u.int64 = -(int64_t)value;
    if (dnayylval.u.int64 > 0) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
    }
  } else {
    dnayylval.u.int64 = (int64_t)value;
    if (dnayylval.u.int64 < 0) {
      dnayyerror("Number out of range.");
      dnayylval.u.int64 = 1;
    }
  }

  return SIGNED_INTEGER;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 711 "dnaLexer.lxx"
{
  // A hexadecimal integer number.
  accept();

  // As above, we'll decode the hex string by hand.
  dnayylval.str = dnayytext;
  dnayylval.u.uint64 = 0;
  const char *p = dnayytext + 2;
  while (*p != '\0') {
    uint64_t next_value = dnayylval.u.uint64 * 16;
    if (next_value < dnayylval.u.uint64) {
      dnayyerror("Number out of range.");
      dnayylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    if (isalpha(*p)) {
      dnayylval.u.uint64 = next_value + (tolower(*p) - 'a' + 10);
    } else {
      dnayylval.u.uint64 = next_value + (*p - '0');
    }
    ++p;
  }

  return UNSIGNED_INTEGER;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 738 "dnaLexer.lxx"
{
  // A floating-point number.
  accept();
  dnayylval.u.real = patof(dnayytext);
  dnayylval.str = dnayytext;
  return FLOAT_REAL;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 746 "dnaLexer.lxx"
{
  // Quoted string.
  accept();
  dnayylval.str = scan_quoted_string('"');
  return QUOTED_STRING;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 753 "dnaLexer.lxx"
{
  // Single-quoted string.
  accept();
  dnayylval.str = scan_quoted_string('\'');
  return UNQUOTED_STRING;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 760 "dnaLexer.lxx"
{
  // Send any other printable character as itself.
  accept();
  return dnayytext[0];
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 765 "dnaLexer.lxx"
ECHO;
	YY_BREAK
#line 2170 "dnaLexer.cxx"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 385 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 385 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 384);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 765 "dnaLexer.lxx"
